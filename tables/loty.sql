
CREATE TABLE IF NOT EXISTS User (
    id         INTEGER       GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1000, 
    username   VARCHAR2(64)  UNIQUE NOT NULL,
    pword      VARCHAR2(128) NOT NULL,
    first_name VARCHAR2(50)  NOT NULL,
    surname    VARCHAR2(50)  NOT NULL,
    loc        INTEGER       NOT NULL REFERENCES Loc,
    birthdate  DATE          NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS Comment (
    id          INTEGER  GENERATED ALWAYS AS IDENTITY START WITH 0, 
    user_id     INTEGER  NOT NULL REFERENCES User,
    post_date   DATETIME NOT NULL,
    contents    VARCHAR2(200),
    stars       INTEGER  DEFAULT 0 CHECK (stars >= 0 && stars <= 5),
    num_reviews INTEGER  DEFAULT 0 CHECK (num_reviews >= 0),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS Claim (
    id         INTEGER  GENERATED ALWAYS AS IDENTITY START WITH 0, 
    user_id    INTEGER  NOT NULL REFERENCES User,
    flight_id  INTEGER  NOT NULL REFERENCES Flight,
    post_date  DATETIME NOT NULL,
    company_id INTEGER  NOT NULL REFERENCES CompensationCompany,
    PRIMARY KEY (id)
);

/* na tę chwilę średnio mi się to podoba */
CREATE TABLE IF NOT EXISTS PlannedFlight (
    user_id  INTEGER NOT NULL REFERENCES User,
    dep_date DATE    NOT NULL,
    arr_date DATE    NOT NULL,
    dep_loc  INTEGER NOT NULL REFERENCES Loc,
    arr_loc  INTEGER NOT NULL REFERENCES Loc,
    PRIMARY KEY (user_id, dep_date, arr_date, dep_loc, arr_loc)
);

CREATE TABLE IF NOT EXISTS CompensationCompany (
    id          INTEGER      GENERATED ALWAYS AS IDENTITY START WITH 0, 
    cname       VARCHAR2(20) NOT NULL
    success_fee NUMBER       NOT NULL 
    /* póki co jako procent - z tego co szukałem, to te firmy mają swoje zakresy cenowe, ale nwm od czego zależy konkretna kwota, jakiej żądają.
     Pewnie m.in. od dystansu lotu */
    stars       INTEGER      DEFAULT 0 CHECK (stars >= 0 && stars <= 5),
    num_reviews INTEGER      DEFAULT 0 CHECK (num_reviews >= 0),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS Airline (
    id            INTEGER GENERATED ALWAYS AS IDENTITY START WITH 0, 
    points_per_km INTEGER DEFAULT 0,
    stars         INTEGER DEFAULT 0 CHECK (stars >= 0 && stars <= 5), 
    /* alternatywnie dla `stars` i `num_reviews` przy aż trzech tabelach, może jedna tabela z tymi dwoma kolumnami, i tam też referencja do ocenianego obiektu
    (komentarz, compensationcompany albo airline) - wtedy wystarczyłby jeden trigger na updatowanie ratingu */
    num_reviews   INTEGER DEFAULT 0 CHECK (num_reviews >= 0),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS FlightAttendant (
    flight_id    INTEGER NOT NULL REFERENCES Flight,
    attendant_id INTEGER NOT NULL REFERENCES User,
    PRIMARY KEY (flight_id, attendant_id)
);

CREATE TABLE IF NOT EXISTS Airport (
    id INTEGER NOT NULL,
    latitude
    longitude
    
)

CREATE TABLE IF NOT EXISTS Flight (
    id                    INTEGER  NOT NULL CHECK (actual_distance_flown >= 0), /* ECTRL ID */
    a_dep                 INTEGER  NOT NULL REFERENCES Airport,
    a_des                 INTEGER  NOT NULL REFERENCES Airport,
    filed_off_block_time  DATETIME NOT NULL, 
    actual_off_block_time DATETIME NOT NULL, 
    filed_arrival_time    DATETIME NOT NULL, 
    actual_arrival_time   DATETIME NOT NULL,  
    /*AC_type   
    AC_operator    
    AC_registration*/  
    actual_distance_flown INTEGER  NOT NULL CHECK (actual_distance_flown >= 0)
);



/*
CREATE OR REPLACE TRIGGER UpdateScore
AFTER INSERT ON Score
FOR EACH ROW
BEGIN 
    FOR ROW IN (SELECT * FROM Score) LOOP
        IF ...
    END LOOP;
    
:OLD.col, :NEW.col
raise_application_error(-20000,'Departament nie może być pusty');
*/